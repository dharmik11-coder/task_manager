{"version":3,"sources":["api/axios.js","redux/projectSlice.js","redux/taskSlice.js","components/AddProject.js","components/ProjectList.js","App.js","redux/store.js","index.js"],"names":["api","axios","create","baseURL","fetchProjects","createAsyncThunk","async","get","data","fetchTasks","addProject","post","newProject","deleteProject","delete","projectId","updateProject","id","name","_ref","put","projectSlice","createSlice","initialState","items","tasks","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","filter","project","updatedProject","index","findIndex","addTask","newTask","updateTask","is_completed","deleteTask","taskId","taskSlice","updatedTask","task","AddProject","setName","useState","dispatch","useDispatch","React","createElement","onSubmit","e","preventDefault","className","type","placeholder","value","onChange","target","ProjectList","projects","useSelector","projectStatus","editProjectId","setEditProjectId","editProjectName","setEditProjectName","setNewTask","newTaskCompleted","setNewTaskCompleted","addTaskForProject","setAddTaskForProject","editTaskId","setEditTaskId","editTaskName","setEditTaskName","editTaskCompleted","setEditTaskCompleted","useEffect","content","map","key","Fragment","onClick","handleUpdateProject","handleEditProject","handleDeleteProject","checked","htmlFor","trim","handleAddTask","getProjectTasks","handleUpdateTask","console","log","handleEditTask","handleDeleteTask","App","store","configureStore","reducer","projectsReducer","taskReducer","ReactDOM","createRoot","document","getElementById","render","Provider"],"mappings":"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","file":"static/js/main.efa767b2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://127.0.0.1:8000/api/', // Your Django API base URL\r\n});\r\n\r\nexport default api;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../api/axios';\r\n\r\n// Async thunk to fetch projects from the API\r\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\r\n    const response = await api.get('/projects/');\r\n    return response.data; // Return the response data\r\n});\r\n\r\n// Async thunk to fetch tasks from the API\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\r\n    const response = await api.get('/tasks/');\r\n    return response.data; // Return the response data\r\n});\r\n\r\n// Async thunk to add a new project\r\nexport const addProject = createAsyncThunk('projects/addProject', async (newProject) => {\r\n    const response = await api.post('/projects/', newProject);\r\n    return response.data; // Return the newly created project\r\n});\r\n\r\n// Async thunk to delete a project\r\nexport const deleteProject = createAsyncThunk('projects/deleteProject', async (projectId) => {\r\n    await api.delete(`/projects/${projectId}/`);\r\n    return projectId; // Return the ID of the deleted project\r\n});\r\n\r\n// Async thunk to update a project\r\nexport const updateProject = createAsyncThunk('projects/updateProject', async ({ id, name }) => {\r\n    const response = await api.put(`/projects/${id}/`, { name });\r\n    return response.data; // Return the updated project data\r\n});\r\n\r\n// Create a slice for projects\r\nconst projectSlice = createSlice({\r\n    name: 'projects',\r\n    initialState: {\r\n        items: [], // Will hold the project data\r\n        tasks: [], // Will hold the task data\r\n        status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\r\n        error: null, // For storing error messages\r\n    },\r\n    reducers: {\r\n        // You can add additional synchronous actions here if needed\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            // Fetch projects\r\n            .addCase(fetchProjects.pending, (state) => {\r\n                state.status = 'loading'; // Update status to loading when the fetch starts\r\n            })\r\n            .addCase(fetchProjects.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'; // Update status to succeeded when the fetch completes\r\n                state.items = action.payload; // Update items with the fetched data\r\n            })\r\n            .addCase(fetchProjects.rejected, (state, action) => {\r\n                state.status = 'failed'; // Update status to failed if there was an error\r\n                state.error = action.error.message; // Store the error message\r\n            })\r\n\r\n            // Fetch tasks\r\n            .addCase(fetchTasks.pending, (state) => {\r\n                state.status = 'loading'; // Update status to loading when the fetch starts\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'; // Update status to succeeded when the fetch completes\r\n                state.tasks = action.payload; // Update tasks with the fetched data\r\n            })\r\n            .addCase(fetchTasks.rejected, (state, action) => {\r\n                state.status = 'failed'; // Update status to failed if there was an error\r\n                state.error = action.error.message; // Store the error message\r\n            })\r\n\r\n            // Add a new project\r\n            .addCase(addProject.fulfilled, (state, action) => {\r\n                state.items.push(action.payload); // Add the new project to the list\r\n            })\r\n\r\n            // Delete a project\r\n            .addCase(deleteProject.fulfilled, (state, action) => {\r\n                state.items = state.items.filter(project => project.id !== action.payload); // Remove the deleted project\r\n            })\r\n\r\n            // Update a project\r\n            .addCase(updateProject.fulfilled, (state, action) => {\r\n                const updatedProject = action.payload;\r\n                const index = state.items.findIndex(project => project.id === updatedProject.id);\r\n                if (index !== -1) {\r\n                    state.items[index] = updatedProject; // Update the project in the state\r\n                }\r\n            });\r\n    }\r\n});\r\n\r\n// Export the reducer to be used in the store\r\nexport default projectSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../api/axios';\r\n\r\n// Async thunk to fetch tasks from the API\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\r\n    const response = await api.get('/tasks/');\r\n    return response.data; // Return the response data\r\n});\r\n\r\n// Async thunk to add a new task\r\nexport const addTask = createAsyncThunk('tasks/addTask', async (newTask) => {\r\n    const response = await api.post('/tasks/', newTask);\r\n    return response.data; // Return the added task data\r\n});\r\n\r\n// Async thunk to update a task\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async ({ id, name, is_completed, project }) => {\r\n    const response = await api.put(`/tasks/${id}/`, { name, is_completed, project });\r\n    return response.data; \r\n});\r\n\r\n\r\n// Async thunk to delete a task\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async (taskId) => {\r\n    await api.delete(`/tasks/${taskId}/`);\r\n    return taskId; // Return the deleted task ID\r\n});\r\n\r\nconst taskSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        items: [], // Will hold the task data\r\n        status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\r\n        error: null, // For storing error messages\r\n    },\r\n    reducers: {\r\n        // You can add additional synchronous actions here if needed\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(fetchTasks.pending, (state) => {\r\n                state.status = 'loading'; // Update status to loading when the fetch starts\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'; // Update status to succeeded when the fetch completes\r\n                state.items = action.payload; // Update items with the fetched tasks data\r\n            })\r\n            .addCase(fetchTasks.rejected, (state, action) => {\r\n                state.status = 'failed'; // Update status to failed if there was an error\r\n                state.error = action.error.message; // Store the error message\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state.items.push(action.payload); // Add the new task to the task list\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const updatedTask = action.payload; // Get the updated task from the response\r\n                const index = state.items.findIndex(task => task.id === updatedTask.id); // Find the task to update\r\n                if (index !== -1) {\r\n                    state.items[index] = updatedTask; // Update the task in the state\r\n                }\r\n            })\r\n            .addCase(updateTask.rejected, (state, action) => {\r\n                state.error = action.error.message; // Store error message if update fails\r\n            })\r\n            .addCase(deleteTask.fulfilled, (state, action) => {\r\n                state.items = state.items.filter(task => task.id !== action.payload); // Remove the task from the state\r\n            });\r\n    }\r\n});\r\n\r\n// Export the reducer to be used in the store\r\nexport default taskSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addProject } from '../redux/projectSlice';\r\n\r\nconst AddProject = () => {\r\n    const [name, setName] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (name) {\r\n            dispatch(addProject({ name }));\r\n            setName(''); // Clear the input field\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"mb-3\">\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"New Project Name\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                />\r\n                <button className=\"btn btn-primary\" type=\"submit\">Add Project</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddProject;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchProjects, deleteProject, updateProject } from '../redux/projectSlice';\r\nimport { fetchTasks, addTask, updateTask, deleteTask } from '../redux/taskSlice'; \r\nimport AddProject from './AddProject'; \r\n\r\nconst ProjectList = () => {\r\n    const dispatch = useDispatch();\r\n    const projects = useSelector((state) => state.projects.items);\r\n    const tasks = useSelector((state) => state.tasks.items); \r\n    const projectStatus = useSelector((state) => state.projects.status);\r\n    const error = useSelector((state) => state.projects.error);\r\n\r\n    // Local state for editing projects\r\n    const [editProjectId, setEditProjectId] = useState(null); \r\n    const [editProjectName, setEditProjectName] = useState('');\r\n    const [newTask, setNewTask] = useState(''); \r\n    const [newTaskCompleted, setNewTaskCompleted] = useState(false); \r\n    const [addTaskForProject, setAddTaskForProject] = useState(null); \r\n\r\n    // Local state for editing tasks\r\n    const [editTaskId, setEditTaskId] = useState(null); \r\n    const [editTaskName, setEditTaskName] = useState(''); \r\n    const [editTaskCompleted, setEditTaskCompleted] = useState(false); \r\n\r\n    useEffect(() => {\r\n        if (projectStatus === 'idle') {\r\n            dispatch(fetchProjects());\r\n            dispatch(fetchTasks()); \r\n        }\r\n    }, [projectStatus, dispatch]);\r\n\r\n    const handleDeleteProject = (id) => {\r\n        dispatch(deleteProject(id)); \r\n    };\r\n\r\n    const handleEditProject = (project) => {\r\n        setEditProjectId(project.id); \r\n        setEditProjectName(project.name); \r\n    };\r\n\r\n    const handleUpdateProject = (id) => {\r\n        dispatch(updateProject({ id, name: editProjectName })); \r\n        setEditProjectId(null); \r\n    };\r\n\r\n    const handleAddTask = (projectId) => {\r\n        if (newTask.trim()) {\r\n            dispatch(addTask({ name: newTask, is_completed: newTaskCompleted, project: projectId }));\r\n            setNewTask(''); \r\n            setNewTaskCompleted(false); \r\n            setAddTaskForProject(null); \r\n        }\r\n    };\r\n\r\n    const handleEditTask = (task) => {\r\n        setEditTaskId(task.id); \r\n        setEditTaskName(task.name); \r\n        setEditTaskCompleted(task.is_completed); \r\n    };\r\n\r\n    const handleUpdateTask = (taskId,projectId) => {\r\n        // Debugging: log current task details before updating\r\n        console.log('Updating task:', {\r\n            id: taskId,\r\n            name: editTaskName,\r\n            is_completed: editTaskCompleted\r\n        });\r\n    \r\n        if (editTaskName.trim()) {\r\n            dispatch(updateTask({ id: taskId, name: editTaskName, is_completed: editTaskCompleted, project: projectId }));\r\n            setEditTaskId(null);\r\n            setEditTaskName('');\r\n            setEditTaskCompleted(false);\r\n        } else {\r\n            console.error('Task name is empty, cannot update.'); // Handle empty name case\r\n        }\r\n    };\r\n\r\n    const handleDeleteTask = (taskId) => {\r\n        dispatch(deleteTask(taskId)); \r\n    };\r\n\r\n    const getProjectTasks = (projectId) => {\r\n        return tasks.filter((task) => task.project === projectId); \r\n    };\r\n\r\n    let content;\r\n\r\n    if (projectStatus === 'loading') {\r\n        content = <div>Loading...</div>;\r\n    } else if (projectStatus === 'succeeded') {\r\n        content = projects.map((project) => (\r\n            <li key={project.id} className=\"list-group-item\">\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                    {editProjectId === project.id ? (\r\n                        <>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={editProjectName}\r\n                                onChange={(e) => setEditProjectName(e.target.value)} \r\n                                className=\"form-control\"\r\n                            />\r\n                            <button\r\n                                className=\"btn btn-success btn-sm ml-2\"\r\n                                onClick={() => handleUpdateProject(project.id)} \r\n                            >\r\n                                Save\r\n                            </button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {project.name}\r\n                            <div>\r\n                                <button\r\n                                    className=\"btn btn-primary btn-sm mr-2\"\r\n                                    onClick={() => handleEditProject(project)} \r\n                                >\r\n                                    Update\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn btn-danger btn-sm\"\r\n                                    onClick={() => handleDeleteProject(project.id)} \r\n                                >\r\n                                    Delete\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn btn-secondary btn-sm\"\r\n                                    onClick={() => setAddTaskForProject(addTaskForProject === project.id ? null : project.id)} \r\n                                >\r\n                                    {addTaskForProject === project.id ? \"Cancel Task\" : \"Add Task\"}\r\n                                </button>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Add Task Input Field */}\r\n                {addTaskForProject === project.id && (\r\n                    <div className=\"mt-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newTask}\r\n                            onChange={(e) => setNewTask(e.target.value)} \r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter task name\"\r\n                        />\r\n                        <div className=\"form-check mt-2\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"\r\n                                id={`completed-${project.id}`}\r\n                                checked={newTaskCompleted}\r\n                                onChange={(e) => setNewTaskCompleted(e.target.checked)} \r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor={`completed-${project.id}`}>\r\n                                Completed\r\n                            </label>\r\n                        </div>\r\n                        <button\r\n                            className=\"btn btn-primary btn-sm mt-2\"\r\n                            onClick={() => handleAddTask(project.id)} \r\n                        >\r\n                            Add Task\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Display associated tasks under each project */}\r\n                <ul className=\"list-group mt-2\">\r\n                    {getProjectTasks(project.id).map((task) => (\r\n                        <li key={task.id} className=\"list-group-item\">\r\n                            {editTaskId === task.id ? (\r\n                                <>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={editTaskName}\r\n                                        onChange={(e) => setEditTaskName(e.target.value)} \r\n                                        className=\"form-control\"\r\n                                    />\r\n                                    <label className=\"form-check-label ml-2\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={editTaskCompleted}\r\n                                            onChange={(e) => setEditTaskCompleted(e.target.checked)} \r\n                                        /> Completed\r\n                                    </label>\r\n                                    <button\r\n                                        className=\"btn btn-success btn-sm ml-2\"\r\n                                        onClick={() => handleUpdateTask(task.id,task.project)} \r\n                                    >\r\n                                        Save\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btn btn-secondary btn-sm ml-2\"\r\n                                        onClick={() => setEditTaskId(null)} // Cancel editing\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {task.name} {task.is_completed ? \"(Completed)\" : \"(Incomplete)\"}\r\n                                    <div>\r\n                                        <button\r\n                                            className=\"btn btn-primary btn-sm mr-2\"\r\n                                            onClick={() => handleEditTask(task)} \r\n                                        >\r\n                                            Update\r\n                                        </button>\r\n                                        <button\r\n                                            className=\"btn btn-danger btn-sm\"\r\n                                            onClick={() => handleDeleteTask(task.id)} \r\n                                        >\r\n                                            Delete\r\n                                        </button>\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </li>\r\n        ));\r\n    } else if (projectStatus === 'failed') {\r\n        content = <div>{error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Project List</h2>\r\n            <AddProject /> \r\n            <ul className=\"list-group\">{content}</ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectList;\r\n","// src/App.js\r\nimport React from 'react';\r\nimport ProjectList from './components/ProjectList';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Task Manager</h1>\r\n  \r\n            {/* ProjectList component to display and manage the list of projects */}\r\n            <ProjectList />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport projectsReducer from \"./projectSlice\";\r\nimport taskReducer from './taskSlice'; // Import taskSlice\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    projects: projectsReducer,\r\n    tasks: taskReducer, // Add the task reducer to the store\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client'; // Note the change here\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root')); // Create a root using createRoot\r\nroot.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n);\r\n"],"sourceRoot":""}